Index: war/WEB-INF/jsp/reports.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%--\r\n    Mango - Open Source M2M - http://mango.serotoninsoftware.com\r\n    Copyright (C) 2006-2011 Serotonin Software Technologies Inc.\r\n    @author Matthew Lohbihler\r\n    \r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see http://www.gnu.org/licenses/.\r\n--%>\r\n<%@ include file=\"/WEB-INF/jsp/include/tech.jsp\" %>\r\n<%@page import=\"com.serotonin.mango.Common\"%>\r\n<%@page import=\"com.serotonin.mango.vo.report.ReportVO\"%>\r\n<%@page import=\"com.serotonin.mango.vo.report.ReportInstance\"%>\r\n\r\n<tag:page dwr=\"ReportsDwr\" js=\"emailRecipients\" onload=\"init\">\r\n  <script type=\"text/javascript\">\r\n    var allPointsArray = new Array();\r\n    var reportPointsArray;\r\n    var selectedReport;\r\n    var emailRecipients;\r\n\r\n    function init() {\r\n        ReportsDwr.init(function(response) {\r\n            hide(\"hourglass\");\r\n            allPointsArray = response.data.points;\r\n\r\n            emailRecipients = new mango.erecip.EmailRecipients(\"recipients\",\r\n                    \"<fmt:message key=\"reports.recipTestEmailMessage\"/>\", response.data.mailingLists, response.data.users);\r\n            emailRecipients.write(\"emailRecipBody\", \"emailRecipients\", null, \"<fmt:message key=\"reports.emailRecipients\"/>\");\r\n\r\n            updateReportInstancesList(response.data.instances);\r\n\r\n            for (var i=0; i<response.data.reports.length; i++) {\r\n                appendReport(response.data.reports[i].id);\r\n                updateReport(response.data.reports[i].id, response.data.reports[i].name);\r\n            }\r\n\r\n            <c:if test=\"${!empty param.wlid}\">\r\n              ReportsDwr.createReportFromWatchlist(${param.wlid}, loadReportCB);\r\n            </c:if>\r\n        });\r\n    }\r\n\r\n    function loadReport(reportId, copy) {\r\n        if (selectedReport)\r\n            stopImageFader(\"r\"+ selectedReport.id +\"Img\");\r\n\r\n        ReportsDwr.getReport(reportId, copy, loadReportCB);\r\n\r\n        if (copy)\r\n        \treportId = <c:out value=\"<%= Common.NEW_ID %>\"/>;\r\n\r\n        startImageFader(\"r\"+ reportId +\"Img\");\r\n        display(\"deleteImg\", reportId != <c:out value=\"<%= Common.NEW_ID %>\"/>);\r\n        display(\"copyImg\", reportId != <c:out value=\"<%= Common.NEW_ID %>\"/>);\r\n    }\r\n\r\n    function loadReportCB(report) {\r\n    \tif (!report)\r\n    \t\treturn;\r\n        if (!selectedReport)\r\n            show($(\"reportDetails\"));\r\n        selectedReport = report;\r\n\r\n        $set(\"name\", report.name);\r\n        reportPointsArray = new Array();\r\n        for (var i=0; i<report.points.length; i++)\r\n            addToReportPointsArray(\r\n                report.points[i].pointId,\r\n                report.points[i].colour,\r\n                report.points[i].consolidatedChart,\r\n                report.points[i].scatterchart,\r\n                report.points[i].title,\r\n                report.points[i].xaxisTitle,\r\n                report.points[i].yaxisTitle,\r\n                report.points[i].referenceline\r\n            );\r\n        $set(\"includeEvents\", report.includeEvents);\r\n        $set(\"includeUserComments\", report.includeUserComments);\r\n        $set(\"dateRangeType\", report.dateRangeType);\r\n        $set(\"relativeType\", report.relativeDateType);\r\n        $set(\"prevPeriodCount\", report.previousPeriodCount);\r\n        $set(\"prevPeriodType\", report.previousPeriodType);\r\n        $set(\"pastPeriodCount\", report.pastPeriodCount);\r\n        $set(\"pastPeriodType\", report.pastPeriodType);\r\n\r\n        $set(\"fromYear\", report.fromYear);\r\n        $set(\"fromMonth\", report.fromMonth);\r\n        $set(\"fromDay\", report.fromDay);\r\n        $set(\"fromHour\", report.fromHour);\r\n        $set(\"fromMinute\", report.fromMinute);\r\n        $set(\"fromNone\", report.fromNone);\r\n\r\n        $set(\"toYear\", report.toYear);\r\n        $set(\"toMonth\", report.toMonth);\r\n        $set(\"toDay\", report.toDay);\r\n        $set(\"toHour\", report.toHour);\r\n        $set(\"toMinute\", report.toMinute);\r\n        $set(\"toNone\", report.toNone);\r\n\r\n        $set(\"schedule\", report.schedule);\r\n        $set(\"schedulePeriod\", report.schedulePeriod);\r\n        $set(\"runDelayMinutes\", report.runDelayMinutes);\r\n        $set(\"scheduleCron\", report.scheduleCron);\r\n\r\n        $set(\"email\", report.email);\r\n        $set(\"includeData\", report.includeData);\r\n        $set(\"zipData\", report.zipData);\r\n        emailRecipients.updateRecipientList(report.recipients);\r\n\r\n        showMessage(\"userMessage\");\r\n\r\n        writeReportPointsArray();\r\n        updateDateRangeFields();\r\n        updateScheduleFields();\r\n        updateSchedulePeriodFields();\r\n        updateEmailFields();\r\n    }\r\n\r\n    function addPointToReport() {\r\n        var pointId = $get(\"allPointsList\");\r\n        addToReportPointsArray(pointId, \"\", true);\r\n        writeReportPointsArray();\r\n    }\r\n\r\n    function addToReportPointsArray(pointId, colour, consolidatedChart, title) {\r\n        var data = getPointData(pointId);\r\n        if (data) {\r\n            // Missing names imply that the point was deleted, so ignore.\r\n            reportPointsArray[reportPointsArray.length] = {\r\n                pointId: pointId,\r\n                pointName : data.name,\r\n                pointType : data.dataTypeMessage,\r\n                colour : !colour ? (!data.chartColour ? \"\" : data.chartColour) : colour,\r\n                consolidatedChart : consolidatedChart,\r\n                //scatterchart : scatterchart\r\n                title : !title ? (!data.title ? \"\" : data.title) : title,\r\n                xaxisTitle : !xaxisTitle ? (!data.xaxisTitle ? \"\" : data.xaxisTitle) : xaxisTitle,\r\n                yaxisTitle : !yaxisTitle ? (!data.yaxisTitle ? \"\" : data.yaxisTitle) : yaxisTitle,\r\n                referenceline : !referenceline ? (!data.referenceline ? \"\" : data.referenceline) : referenceline,\r\n            };\r\n        }\r\n    }\r\n\r\n    function getPointData(pointId) {\r\n        for (var i=0; i<allPointsArray.length; i++) {\r\n            if (allPointsArray[i].id == pointId)\r\n                return allPointsArray[i];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function writeReportPointsArray() {\r\n        dwr.util.removeAllRows(\"reportPointsTable\");\r\n        if (reportPointsArray.length == 0) {\r\n            show($(\"reportPointsTableEmpty\"));\r\n            hide($(\"reportPointsTableHeaders\"));\r\n        }\r\n        else {\r\n            hide($(\"reportPointsTableEmpty\"));\r\n            show($(\"reportPointsTableHeaders\"));\r\n            dwr.util.addRows(\"reportPointsTable\", reportPointsArray,\r\n                [\r\n                    function(data) { return data.pointName; },\r\n                    function(data) { return data.pointType; },\r\n                    function(data) {\r\n                    \t    return \"<input type='text' value='\"+ data.colour +\"' \"+\r\n                    \t            \"onblur='updatePointColour(\"+ data.pointId +\", this.value)'/>\";\r\n                    },\r\n                    function(data) {\r\n                        return \"<input type='checkbox'\"+ (data.consolidatedChart ? \" checked='checked'\" : \"\") +\r\n                                \" onclick='updatePointConsolidatedChart(\"+ data.pointId +\", this.checked)'/>\";\r\n                    },\r\n                    function(data) {\r\n                            return \"<img src='images/bullet_delete.png' class='ptr' \"+\r\n                                    \"onclick='removeFromReportPointsArray(\"+ data.pointId +\")'/>\";\r\n                    },\r\n                  function(data) {\r\n                    return \"<input type='radio' id= 'line' name= 'chartType\"+data.pointId+\r\n                    \"' value= 'line' onchange='updatePointChartType(\"\r\n                    + data.pointId +\", this.checked)'/><label for='line'>Line</label> <input type='radio' id= 'scatter' name= 'chartType\" + data.pointId + \"' value= 'scatter' onchange='updatePointChartType(\" + data.pointId +\", this.checked)'/><label for='scatter'>Scatter</label>\";\r\n                  },\r\n\r\n                  function(data) {\r\n                    return \"<input type='text' value='\"+ data.title +\"' \"+\r\n                            \"onblur='updatePointTitle(\"+ data.pointId +\", this.value)'/>\";\r\n                  },\r\n\r\n                  function(data) {\r\n                    return \"<input type='text' value='\"+ data.xaxisTitle +\"' \"+\r\n                            \"onblur='updatexaxisTitle(\"+ data.pointId +\", this.value)'/>\";\r\n                  },\r\n\r\n                  function(data) {\r\n                    return \"<input type='text' value='\"+ data.yaxisTitle +\"' \"+\r\n                            \"onblur='updateyaxisTitle(\"+ data.pointId +\", this.value)'/>\";\r\n                  },\r\n\r\n                  function(data) {\r\n                    return \"<img src='images/bullet_delete.png' class='ptr' \"+\r\n                            \"onclick='removeFromReportPointsArray(\"+ data.pointId +\")'/>\";\r\n                  }\r\n                ],\r\n                {\r\n                    rowCreator:function(options) {\r\n                        var tr = document.createElement(\"tr\");\r\n                        tr.className = \"smRow\"+ (options.rowIndex % 2 == 0 ? \"\" : \"Alt\");\r\n                        return tr;\r\n                    },\r\n                    cellCreator:function(options) {\r\n                    \tvar td = document.createElement(\"td\");\r\n                    \tif (options.cellNum == 3)\r\n                    \t\ttd.align = \"center\";\r\n                        return td;\r\n                    }\r\n                });\r\n        }\r\n        updatePointsList();\r\n    }\r\n\r\n    function updatePointColour(pointId, colour) {\r\n    \tvar item = getElement(reportPointsArray, pointId, \"pointId\");\r\n    \tif (item)\r\n    \t\titem[\"colour\"] = colour;\r\n    }\r\n\r\n    function updatePointConsolidatedChart(pointId, consolidatedChart) {\r\n        var item = getElement(reportPointsArray, pointId, \"pointId\");\r\n        if (item)\r\n            item[\"consolidatedChart\"] = consolidatedChart;\r\n    }\r\n\r\n    function updatePointChartType(pointId, chartType) {\r\n          var item = getElement(reportPointsArray, pointId, \"pointId\");\r\n          if(item)\r\n            item[\"chartType\"] = chartType;\r\n    }\r\n\r\n    function updatePointTitle(pointId, title) {\r\n      var item = getElement(reportPointsArray, pointId, \"pointId\");\r\n      if (item)\r\n        item[\"title\"] = title;\r\n    }\r\n\r\n    function updatexaxisTitle(pointId, xaxisTitle) {\r\n      var item = getElement(reportPointsArray, pointId, \"pointId\");\r\n      if (item)\r\n        item[\"xaxisTitle\"] = xaxisTitle;\r\n    }\r\n\r\n    function updateyaxisTitle(pointId, yaxisTitle) {\r\n      var item = getElement(reportPointsArray, pointId, \"pointId\");\r\n      if (item)\r\n        item[\"yxisTitle\"] = yaxisTitle;\r\n    }\r\n        function referenceline(pointId, yaxisTitle) {\r\n          var item = getElement(reportPointsArray, pointId, \"pointId\");\r\n          if (item)\r\n            item[\"referenceline\"] = referenceline;\r\n        }\r\n\r\n\r\n    function updatePointsList() {\r\n        dwr.util.removeAllOptions(\"allPointsList\");\r\n        var availPoints = new Array();\r\n        for (var i=0; i<allPointsArray.length; i++) {\r\n            var found = false;\r\n            for (var j=0; j<reportPointsArray.length; j++) {\r\n                if (reportPointsArray[j].pointId == allPointsArray[i].id) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!found)\r\n                availPoints[availPoints.length] = allPointsArray[i];\r\n        }\r\n        dwr.util.addOptions(\"allPointsList\", availPoints, \"id\", \"name\");\r\n    }\r\n\r\n    function removeFromReportPointsArray(pointId) {\r\n        for (var i=reportPointsArray.length-1; i>=0; i--) {\r\n            if (reportPointsArray[i].pointId == pointId)\r\n                reportPointsArray.splice(i, 1);\r\n        }\r\n        writeReportPointsArray();\r\n    }\r\n\r\n    function updateReportInstancesList(instanceArray) {\r\n        stopImageFader(\"reportInstancesRefreshImg\");\r\n        dwr.util.removeAllRows(\"reportInstancesList\");\r\n        if (instanceArray.length == 0)\r\n            show(\"noReportInstances\");\r\n        else {\r\n            hide(\"noReportInstances\");\r\n            dwr.util.addRows(\"reportInstancesList\", instanceArray,\r\n                [\r\n                    function(ri) { return ri.name; },\r\n                    function(ri) { return ri.prettyRunStartTime; },\r\n                    function(ri) { return ri.prettyRunDuration; },\r\n                    function(ri) { return ri.prettyReportStartTime; },\r\n                    function(ri) { return ri.prettyReportEndTime; },\r\n                    function(ri) { return ri.prettyRecordCount; },\r\n                    function(ri) {\r\n                        return \"<input type='checkbox'\"+ (ri.preventPurge ? \" checked='checked'\" : \"\") +\r\n                                \" onclick='ReportsDwr.setPreventPurge(\"+ ri.id +\", this.checked)'/>\";\r\n                    },\r\n                    function(ri) {\r\n                        if (ri.state == <c:out value=\"<%= ReportInstance.STATE_NOT_STARTED %>\"/> ||\r\n                                ri.state == <c:out value=\"<%= ReportInstance.STATE_STARTED %>\"/>)\r\n                            return \"\";\r\n\r\n                        var result = \"<img src='images/bullet_down.png' class='ptr' title='<fmt:message key=\"reports.export\"/>' \"+\r\n                                \"onclick='exportData(\\\"\"+ encodeQuotes(ri.name) +\"\\\", \"+ ri.id +\")'/>\";\r\n\r\n                        if (ri.includeEvents != <c:out value=\"<%= ReportVO.EVENTS_NONE %>\"/>)\r\n                            result += \"<img src='images/flag_white.png' class='ptr' title='<fmt:message key=\"reports.eventExport\"/>' \"+\r\n                                    \"onclick='exportEventData(\\\"\"+ encodeQuotes(ri.name) +\"\\\", \"+ ri.id +\")'/>\";\r\n\r\n                        if (ri.includeUserComments)\r\n                            result += \"<img src='images/comment.png' class='ptr' title='<fmt:message key=\"reports.userCommentExport\"/>' \"+\r\n                                    \"onclick='exportUserComments(\\\"\"+ encodeQuotes(ri.name) +\"\\\", \"+ ri.id +\")'/>\";\r\n\r\n                        result += \"<img src='images/icon_chart.png' class='ptr' title='<fmt:message key=\"reports.charts\"/>' \"+\r\n                                \"onclick='viewChart(\"+ ri.id +\")'/>\"+\r\n                                \"<img id='ri\"+ ri.id +\"DeleteImg' src='images/bullet_delete.png' class='ptr' \"+\r\n                                \"onclick='deleteReportInstance(\"+ ri.id +\")'/> \";\r\n\r\n                        return result;\r\n                    }\r\n                ],\r\n                {\r\n                    rowCreator: function(options) {\r\n                        var tr = document.createElement(\"tr\");\r\n                        tr.className = \"row\"+ (options.rowIndex % 2 == 0 ? \"\" : \"Alt\");\r\n                        return tr;\r\n                    },\r\n                    cellCreator: function(options) {\r\n                        var td = document.createElement(\"td\");\r\n                        if (options.cellNum == 5)\r\n                            td.align = \"right\";\r\n                        if (options.cellNum == 6)\r\n                            td.align = \"center\";\r\n                        return td;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    function deleteReportInstance(instanceId) {\r\n        var img = $(\"ri\"+ instanceId +\"DeleteImg\");\r\n        img.src = \"images/bullet_black.png\";\r\n        img.onclick = null;\r\n        dojo.html.removeClass(img, \"ptr\");\r\n        startImageFader(\"reportInstancesRefreshImg\");\r\n        ReportsDwr.deleteReportInstance(instanceId, updateReportInstancesList);\r\n    }\r\n\r\n    function exportData(name, instanceId) {\r\n        window.location = \"export/\"+ name +\".csv?instanceId=\"+ instanceId;\r\n    }\r\n\r\n    function exportEventData(name, instanceId) {\r\n        window.location = \"eventExport/\"+ name +\"Events.csv?instanceId=\"+ instanceId;\r\n    }\r\n\r\n    function exportUserComments(name, instanceId) {\r\n        window.location = \"userCommentExport/\"+ name +\"Comments.csv?instanceId=\"+ instanceId;\r\n    }\r\n\r\n    function viewChart(instanceId) {\r\n        window.open(\"reportChart.shtm?instanceId=\"+ instanceId, \"chartTarget\");\r\n    }\r\n\r\n    function refreshReportInstanceList() {\r\n        ReportsDwr.getReportInstances(updateReportInstancesList);\r\n        startImageFader(\"reportInstancesRefreshImg\");\r\n    }\r\n\r\n    function updateDateRangeFields() {\r\n        var dateRangeType = $get(\"dateRangeType\");\r\n        if (dateRangeType == 1) {\r\n            setDisabled(\"relprev\", false);\r\n            setDisabled(\"relpast\", false);\r\n\r\n            var relativeType = $get(\"relativeType\");\r\n            if (relativeType == 1) {\r\n                setDisabled(\"prevPeriodCount\", false);\r\n                setDisabled(\"prevPeriodType\", false);\r\n                setDisabled(\"pastPeriodCount\", true);\r\n                setDisabled(\"pastPeriodType\", true);\r\n            }\r\n            else {\r\n                setDisabled(\"prevPeriodCount\", true);\r\n                setDisabled(\"prevPeriodType\", true);\r\n                setDisabled(\"pastPeriodCount\", false);\r\n                setDisabled(\"pastPeriodType\", false);\r\n            }\r\n\r\n            setDisabled(\"fromYear\", true);\r\n            setDisabled(\"fromMonth\", true);\r\n            setDisabled(\"fromDay\", true);\r\n            setDisabled(\"fromHour\", true);\r\n            setDisabled(\"fromMinute\", true);\r\n            setDisabled(\"fromNone\", true);\r\n            setDisabled(\"toYear\", true);\r\n            setDisabled(\"toMonth\", true);\r\n            setDisabled(\"toDay\", true);\r\n            setDisabled(\"toHour\", true);\r\n            setDisabled(\"toMinute\", true);\r\n            setDisabled(\"toNone\", true);\r\n        }\r\n        else {\r\n            setDisabled(\"relprev\", true);\r\n            setDisabled(\"relpast\", true);\r\n            setDisabled(\"prevPeriodCount\", true);\r\n            setDisabled(\"prevPeriodType\", true);\r\n            setDisabled(\"pastPeriodCount\", true);\r\n            setDisabled(\"pastPeriodType\", true);\r\n\r\n            var inception = $get(\"fromNone\");\r\n            setDisabled(\"fromYear\", inception);\r\n            setDisabled(\"fromMonth\", inception);\r\n            setDisabled(\"fromDay\", inception);\r\n            setDisabled(\"fromHour\", inception);\r\n            setDisabled(\"fromMinute\", inception);\r\n            setDisabled(\"fromNone\", false);\r\n\r\n            var now = $get(\"toNone\");\r\n            setDisabled(\"toYear\", now);\r\n            setDisabled(\"toMonth\", now);\r\n            setDisabled(\"toDay\", now);\r\n            setDisabled(\"toHour\", now);\r\n            setDisabled(\"toMinute\", now);\r\n            setDisabled(\"toNone\", false);\r\n        }\r\n    }\r\n\r\n    function updateScheduleFields() {\r\n        display(\"scheduleDetails\", $get(\"schedule\"));\r\n    }\r\n\r\n    function updateSchedulePeriodFields() {\r\n        var schedulePeriod = $get(\"schedulePeriod\");\r\n        setDisabled(\"runDelayMinutes\", schedulePeriod == <c:out value=\"<%= ReportVO.SCHEDULE_CRON %>\"/>);\r\n        setDisabled(\"scheduleCron\", schedulePeriod != <c:out value=\"<%= ReportVO.SCHEDULE_CRON %>\"/>);\r\n    }\r\n\r\n    function updateEmailFields() {\r\n        var email = $get(\"email\");\r\n        display(\"emailDetails\", email);\r\n        display(\"emailRecipBody\", email);\r\n    }\r\n\r\n\r\n    function getReportPointIdsArray() {\r\n        var points = new Array();\r\n        for (var i=0; i<reportPointsArray.length; i++)\r\n            points[points.length] = { pointId: reportPointsArray[i].pointId, colour: reportPointsArray[i].colour,\r\n        \t\t    consolidatedChart: reportPointsArray[i].consolidatedChart,\r\n        \t\t    scatterchart: reportPointsArray[i].scatterchart,\r\n        \t\t    title: reportPointsArray[i].title,\r\n        \t\t    xaxisTitle: reportPointsArray[i].xaxisTitle,\r\n        \t\t    yaxisTitle: reportPointsArray[i].yaxisTitle,\r\n        \t\t    referenceline: reportPointsArray[i].referenceline,};\r\n        return points;\r\n    }\r\n\r\n    function saveReport() {\r\n        ReportsDwr.saveReport(selectedReport.id, $get(\"name\"), getReportPointIdsArray(), $get(\"includeEvents\"),\r\n                $get(\"includeUserComments\"), $get(\"dateRangeType\"), $get(\"relativeType\"), $get(\"prevPeriodCount\"),\r\n                $get(\"prevPeriodType\"), $get(\"pastPeriodCount\"), $get(\"pastPeriodType\"), $get(\"fromNone\"),\r\n                $get(\"fromYear\"), $get(\"fromMonth\"), $get(\"fromDay\"), $get(\"fromHour\"), $get(\"fromMinute\"),\r\n                $get(\"toNone\"), $get(\"toYear\"), $get(\"toMonth\"), $get(\"toDay\"), $get(\"toHour\"), $get(\"toMinute\"),\r\n                $get(\"schedule\"), $get(\"schedulePeriod\"), $get(\"runDelayMinutes\"), $get(\"scheduleCron\"), $get(\"email\"),\r\n                $get(\"includeData\"), $get(\"zipData\"), emailRecipients.createRecipientArray(), function(response) {\r\n            stopImageFader(\"saveImg\");\r\n            clearMessages();\r\n\r\n            if (response.hasMessages)\r\n                showMessages(response.messages);\r\n            else {\r\n                if (selectedReport.id == <c:out value=\"<%= Common.NEW_ID %>\"/>) {\r\n                    stopImageFader(\"r\"+ selectedReport.id +\"Img\");\r\n                    selectedReport.id = response.data.reportId;\r\n                    appendReport(selectedReport.id);\r\n                    startImageFader(\"r\"+ selectedReport.id +\"Img\");\r\n                    showMessage(\"userMessage\", \"<fmt:message key=\"reports.reportAdded\"/>\");\r\n                    show(\"deleteImg\");\r\n                    show(\"copyImg\");\r\n                }\r\n                else\r\n                    showMessage(\"userMessage\", \"<fmt:message key=\"reports.reportSaved\"/>\");\r\n                updateReport(selectedReport.id, $get(\"name\"));\r\n            }\r\n        });\r\n        startImageFader(\"saveImg\");\r\n    }\r\n\r\n    function appendReport(reportId) {\r\n        createFromTemplate(\"r_TEMPLATE_\", reportId, \"reportsTable\");\r\n    }\r\n\r\n    function updateReport(id, name) {\r\n        $(\"r\"+ id +\"Name\").innerHTML = name;\r\n    }\r\n\r\n    function clearMessages() {\r\n        showMessage(\"userMessage\");\r\n        showMessage(\"nameError\");\r\n        showMessage(\"pointsError\");\r\n        showMessage(\"previousPeriodCountError\");\r\n        showMessage(\"pastPeriodCountError\");\r\n        showMessage(\"runDelayMinutesError\");\r\n        showMessage(\"scheduleCronError\");\r\n        showMessage(\"recipientsError\");\r\n    }\r\n\r\n    function showMessages(messages) {\r\n        for (var i=0; i<messages.length; i++) {\r\n            if (messages[i].contextKey)\r\n                showMessage(messages[i].contextKey +\"Error\", messages[i].contextualMessage);\r\n            else\r\n                alert(messages[i].genericMessage);\r\n        }\r\n    }\r\n\r\n    function deleteReport() {\r\n        ReportsDwr.deleteReport(selectedReport.id);\r\n        stopImageFader(\"r\"+ selectedReport.id +\"Img\");\r\n        $(\"reportsTable\").removeChild($(\"r\"+ selectedReport.id));\r\n        hide(\"reportDetails\");\r\n        selectedReport = null;\r\n    }\r\n\r\n    function runReport() {\r\n        if (hasImageFader(\"runImg\"))\r\n            return;\r\n\r\n        ReportsDwr.runReport($get(\"name\"), getReportPointIdsArray(), $get(\"includeEvents\"),\r\n                $get(\"includeUserComments\"), $get(\"dateRangeType\"), $get(\"relativeType\"), $get(\"prevPeriodCount\"),\r\n                $get(\"prevPeriodType\"), $get(\"pastPeriodCount\"), $get(\"pastPeriodType\"), $get(\"fromNone\"),\r\n                $get(\"fromYear\"), $get(\"fromMonth\"), $get(\"fromDay\"), $get(\"fromHour\"), $get(\"fromMinute\"),\r\n                $get(\"toNone\"), $get(\"toYear\"), $get(\"toMonth\"), $get(\"toDay\"), $get(\"toHour\"), $get(\"toMinute\"),\r\n                $get(\"email\"), $get(\"includeData\"), $get(\"zipData\"), emailRecipients.createRecipientArray(), function(response) {\r\n            stopImageFader(\"runImg\");\r\n            clearMessages();\r\n\r\n            if (response.hasMessages)\r\n                showMessages(response.messages);\r\n            else {\r\n                showMessage(\"userMessage\", \"<fmt:message key=\"reports.reportQueued\"/>\");\r\n                refreshReportInstanceList();\r\n            }\r\n        });\r\n        startImageFader(\"runImg\");\r\n    }\r\n  </script>\r\n\r\n  <table cellpadding=\"0\" cellspacing=\"0\"><tr><td>\r\n    <div class=\"borderDiv marB\" style=\"max-height:300px;overflow:auto;\">\r\n      <table width=\"100%\">\r\n        <tr>\r\n          <td>\r\n            <span class=\"smallTitle\"><fmt:message key=\"reports.reportQueue\"/></span>\r\n            <tag:help id=\"reportInstances\"/>\r\n          </td>\r\n          <td align=\"right\">\r\n            <tag:img id=\"reportInstancesRefreshImg\" png=\"control_play_blue\" title=\"common.refresh\"\r\n                    onclick=\"refreshReportInstanceList()\"/>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n\r\n      <table cellspacing=\"1\">\r\n        <tr class=\"rowHeader\">\r\n          <td><fmt:message key=\"reports.reportName\"/></td>\r\n          <td><fmt:message key=\"reports.runTimeStart\"/></td>\r\n          <td><fmt:message key=\"reports.runDuration\"/></td>\r\n          <td><fmt:message key=\"common.dateRangeFrom\"/></td>\r\n          <td><fmt:message key=\"common.dateRangeTo\"/></td>\r\n          <td><fmt:message key=\"reports.reportRecords\"/></td>\r\n          <td><fmt:message key=\"reports.doNotPurge\"/></td>\r\n          <td></td>\r\n        </tr>\r\n        <tr id=\"hourglass\" class=\"row\"><td colspan=\"8\" align=\"center\"><tag:img png=\"hourglass\" title=\"reports.loading\"/></td></tr>\r\n        <tr id=\"noReportInstances\" class=\"row\" style=\"display:none;\"><td colspan=\"8\"><fmt:message key=\"reports.noInstances\"/></td></tr>\r\n        <tbody id=\"reportInstancesList\"></tbody>\r\n      </table>\r\n    </div>\r\n  </td></tr></table>\r\n\r\n  <table cellpadding=\"0\" cellspacing=\"0\">\r\n    <tr>\r\n      <td valign=\"top\">\r\n        <div class=\"borderDiv marR\">\r\n          <table width=\"100%\">\r\n            <tr>\r\n              <td>\r\n                <span class=\"smallTitle\"><fmt:message key=\"reports.templates\"/></span>\r\n                <tag:help id=\"reportTemplates\"/>\r\n              </td>\r\n              <td align=\"right\"><tag:img png=\"report_add\" title=\"reports.newReport\"\r\n                      onclick=\"loadReport(${applicationScope['constants.Common.NEW_ID']}, false)\"\r\n                      id=\"r${applicationScope['constants.Common.NEW_ID']}Img\"/></td>\r\n            </tr>\r\n          </table>\r\n          <table id=\"reportsTable\">\r\n            <tbody id=\"r_TEMPLATE_\" onclick=\"loadReport(getMangoId(this), false)\" class=\"ptr\" style=\"display:none;\"><tr>\r\n              <td><tag:img id=\"r_TEMPLATE_Img\" png=\"report\" title=\"reports.report\"/></td>\r\n              <td class=\"link\" id=\"r_TEMPLATE_Name\"></td>\r\n            </tr></tbody>\r\n          </table>\r\n        </div>\r\n      </td>\r\n\r\n      <td valign=\"top\" id=\"reportDetails\" style=\"display:none;\">\r\n        <div class=\"borderDiv\">\r\n          <table width=\"100%\">\r\n            <tr>\r\n              <td>\r\n                <span class=\"smallTitle\"><tag:img id=\"reportImg\" png=\"report\" title=\"reports.report\"/>\r\n                <fmt:message key=\"reports.criteria\"/></span>\r\n              </td>\r\n              <td align=\"right\">\r\n                <tag:img id=\"deleteImg\" png=\"delete\" title=\"common.delete\" onclick=\"deleteReport();\"/>\r\n                <tag:img id=\"runImg\" png=\"report_go\" onclick=\"runReport();\" title=\"reports.runNow\"/>\r\n                <tag:img id=\"saveImg\" png=\"save\" onclick=\"saveReport();\" title=\"common.save\"/>\r\n                <tag:img id=\"copyImg\" png=\"report_add\" onclick=\"loadReport(selectedReport.id, true);\" title=\"common.copy\"/>\r\n              </td>\r\n            </tr>\r\n            <tr><td class=\"formError\" id=\"userMessage\"></td></tr>\r\n          </table>\r\n\r\n          <table>\r\n            <tr>\r\n              <td class=\"formLabelRequired\"><fmt:message key=\"reports.reportName\"/></td>\r\n              <td class=\"formField\">\r\n                <input type=\"text\" id=\"name\" class=\"formLong\"/><br/>\r\n                <span class=\"formError\" id=\"nameError\"></span>\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td class=\"formLabelRequired\"><fmt:message key=\"common.points\"/></td>\r\n              <td class=\"formField\">\r\n                <select id=\"allPointsList\"></select>\r\n                <tag:img png=\"add\" onclick=\"addPointToReport();\" title=\"common.add\"/>\r\n\r\n                <table cellspacing=\"1\">\r\n                  <tbody id=\"reportPointsTableEmpty\" style=\"display:none;\">\r\n                    <tr><th colspan=\"4\"><fmt:message key=\"reports.noPoints\"/></th></tr>\r\n                  </tbody>\r\n                  <tbody id=\"reportPointsTableHeaders\" style=\"display:none;\">\r\n                    <tr class=\"smRowHeader\">\r\n                      <td><fmt:message key=\"reports.pointName\"/></td>\r\n                      <td><fmt:message key=\"reports.dataType\"/></td>\r\n                      <td><fmt:message key=\"reports.colour\"/></td>\r\n                      <td><fmt:message key=\"reports.consolidatedChart\"/></td>\r\n                      <td><fmt:message key=\"reports.scatterchart\"/></td>\r\n                      <td><fmt:message key=\"reports.plottitle\"/></td>\r\n                      <td><fmt:message key=\"reports.xaxisTitle\"/></td>\r\n                      <td><fmt:message key=\"reports.yaxisTitle\"/></td>\r\n                      <td><fmt:message key=\"reports.referenceline\"/></td>\r\n                      <td></td>\r\n                    </tr>\r\n                  </tbody>\r\n                  <tbody id=\"reportPointsTable\"></tbody>\r\n                </table>\r\n                <span id=\"pointsError\" class=\"formError\"></span>\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td class=\"formLabelRequired\"><fmt:message key=\"reports.events\"/></td>\r\n              <td class=\"formField\">\r\n                <select id=\"includeEvents\">\r\n                  <option value=\"<c:out value=\"<%= ReportVO.EVENTS_NONE %>\"/>\"><fmt:message key=\"reports.events.none\"/></option>\r\n                  <option value=\"<c:out value=\"<%= ReportVO.EVENTS_ALARMS %>\"/>\"><fmt:message key=\"reports.events.alarms\"/></option>\r\n                  <option value=\"<c:out value=\"<%= ReportVO.EVENTS_ALL %>\"/>\"><fmt:message key=\"reports.events.all\"/></option>\r\n                </select>\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td class=\"formLabelRequired\"><fmt:message key=\"reports.comments\"/></td>\r\n              <td class=\"formField\"><input type=\"checkbox\" id=\"includeUserComments\"/></td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td class=\"formLabelRequired\"><fmt:message key=\"reports.dateRange\"/></td>\r\n              <td class=\"formField\">\r\n                <table>\r\n                  <tr><td>\r\n                    <input type=\"radio\" name=\"dateRangeType\" value=\"<c:out value=\"<%= ReportVO.DATE_RANGE_TYPE_RELATIVE %>\"/>\" id=\"drrel\"\r\n                            checked=\"checked\" onchange=\"updateDateRangeFields()\"/><label\r\n                            for=\"drrel\"><fmt:message key=\"reports.relative\"/></label>\r\n                  </td></tr>\r\n                  <tr>\r\n                    <td style=\"padding-left:40px;\">\r\n                      <table>\r\n                        <tr>\r\n                          <td valign=\"top\"><input type=\"radio\" name=\"relativeType\" onchange=\"updateDateRangeFields()\"\r\n                                  id=\"relprev\" value=\"<c:out value=\"<%= ReportVO.RELATIVE_DATE_TYPE_PREVIOUS %>\"/>\"\r\n                                  checked=\"checked\"/><label for=\"relprev\"><fmt:message key=\"reports.previous\"/></label></td>\r\n                          <td valign=\"top\">\r\n                            <input type=\"text\" id=\"prevPeriodCount\" class=\"formVeryShort\"/>\r\n                            <select id=\"prevPeriodType\">\r\n                              <tag:timePeriodOptions min=\"true\" h=\"true\" d=\"true\" w=\"true\" mon=\"true\" y=\"true\"/>\r\n                            </select><br/>\r\n                            <span class=\"formError\" id=\"previousPeriodCountError\"></span>\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td valign=\"top\"><input type=\"radio\" name=\"relativeType\" onchange=\"updateDateRangeFields()\"\r\n                                  id=\"relpast\" value=\"<c:out value=\"<%= ReportVO.RELATIVE_DATE_TYPE_PAST %>\"/>\"/><label\r\n                                  for=\"relpast\"><fmt:message key=\"reports.past\"/></label></td>\r\n                          <td valign=\"top\">\r\n                            <input type=\"text\" id=\"pastPeriodCount\" class=\"formVeryShort\"/>\r\n                            <select id=\"pastPeriodType\">\r\n                              <tag:timePeriodOptions min=\"true\" h=\"true\" d=\"true\" w=\"true\" mon=\"true\" y=\"true\"/>\r\n                            </select><br/>\r\n                            <span class=\"formError\" id=\"pastPeriodCountError\"></span>\r\n                          </td>\r\n                        </tr>\r\n                      </table>\r\n                    </td>\r\n                  </tr>\r\n\r\n                  <tr><td>\r\n                    <input type=\"radio\" name=\"dateRangeType\" value=\"<c:out value=\"<%= ReportVO.DATE_RANGE_TYPE_SPECIFIC %>\"/>\" id=\"drspec\"\r\n                            onchange=\"updateDateRangeFields()\"/><label for=\"drspec\"><fmt:message key=\"reports.specificDates\"/></label>\r\n                  </td></tr>\r\n                  <tr>\r\n                    <td style=\"padding-left:40px;\">\r\n                      <table>\r\n                        <tr>\r\n                          <td></td>\r\n                          <td align=\"center\"><fmt:message key=\"common.tp.year\"/></td>\r\n                          <td align=\"center\"><fmt:message key=\"common.tp.month\"/></td>\r\n                          <td align=\"center\"><fmt:message key=\"common.tp.day\"/></td>\r\n                          <td align=\"center\"><fmt:message key=\"common.tp.hour\"/></td>\r\n                          <td align=\"center\"><fmt:message key=\"common.tp.minute\"/></td>\r\n                          <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td><fmt:message key=\"common.dateRangeFrom\"/></td>\r\n                          <td><input type=\"text\" id=\"fromYear\" class=\"formVeryShort\"/></td>\r\n                          <td><select id=\"fromMonth\"><tag:monthOptions/></select></td>\r\n                          <td><select id=\"fromDay\"><tag:dayOptions/></select></td>\r\n                          <td><select id=\"fromHour\"><tag:hourOptions/></select></td>\r\n                          <td><select id=\"fromMinute\"><tag:minuteOptions/></select></td>\r\n                          <td><input type=\"checkbox\" name=\"fromNone\" id=\"fromNone\"\r\n                                  onclick=\"updateDateRangeFields()\"/><label for=\"fromNone\"><fmt:message key=\"common.inception\"/></label></td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td><fmt:message key=\"common.dateRangeTo\"/></td>\r\n                          <td><input type=\"text\" id=\"toYear\" class=\"formVeryShort\"/></td>\r\n                          <td><select id=\"toMonth\"><tag:monthOptions/></select></td>\r\n                          <td><select id=\"toDay\"><tag:dayOptions/></select></td>\r\n                          <td><select id=\"toHour\"><tag:hourOptions/></select></td>\r\n                          <td><select id=\"toMinute\"><tag:minuteOptions/></select></td>\r\n                          <td><input type=\"checkbox\" name=\"toNone\" id=\"toNone\"\r\n                                  onclick=\"updateDateRangeFields()\"/><label for=\"toNone\"><fmt:message key=\"common.latest\"/></label></td>\r\n                        </tr>\r\n                      </table>\r\n                    </td>\r\n                  </tr>\r\n                </table>\r\n              </td>\r\n            </tr>\r\n\r\n            <tr><td colspan=\"3\" class=\"horzSeparator\"></td></tr>\r\n\r\n            <tr>\r\n              <td class=\"formLabelRequired\"><fmt:message key=\"reports.schedule\"/></td>\r\n              <td class=\"formField\">\r\n                <input type=\"checkbox\" id=\"schedule\" onclick=\"updateScheduleFields();\"/>\r\n              </td>\r\n            </tr>\r\n\r\n            <tbody id=\"scheduleDetails\">\r\n              <tr>\r\n                <td class=\"formLabelRequired\"><fmt:message key=\"reports.runEvery\"/></td>\r\n                <td class=\"formField\">\r\n                  <table cellpadding=\"0\" cellspacing=\"0\">\r\n                    <tr><td>\r\n                      <select id=\"schedulePeriod\" onchange=\"updateSchedulePeriodFields()\">\r\n                        <tag:timePeriodOptions h=\"true\" d=\"true\" w=\"true\" mon=\"true\" y=\"true\" singular=\"true\"/>\r\n                        <option value=\"<c:out value=\"<%= ReportVO.SCHEDULE_CRON %>\"/>\"><fmt:message key=\"reports.cron\"/></option>\r\n                      </select>\r\n                    </td></tr>\r\n                    <tr><td style=\"padding-left:40px;\">\r\n                      <fmt:message key=\"reports.runDelay\"/>: <input type=\"text\" id=\"runDelayMinutes\" class=\"formVeryShort\"/>\r\n                      <div id=\"runDelayMinutesError\" class=\"formError\"></div>\r\n                    </td></tr>\r\n                    <tr><td style=\"padding-left:40px;\">\r\n                      <fmt:message key=\"common.cronPattern\"/>: <input type=\"text\" id=\"scheduleCron\"/>\r\n                      <tag:help id=\"cronPatterns\"/><br/>\r\n                      <span id=\"scheduleCronError\" class=\"formError\"></span>\r\n                    </td></tr>\r\n                  </table>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tr><td colspan=\"3\" class=\"horzSeparator\"></td></tr>\r\n\r\n            <tr>\r\n              <td class=\"formLabelRequired\"><fmt:message key=\"reports.emailReport\"/></td>\r\n              <td class=\"formField\"><input type=\"checkbox\" id=\"email\" onclick=\"updateEmailFields();\"/></td>\r\n            </tr>\r\n\r\n            <tbody id=\"emailDetails\">\r\n              <tr>\r\n                <td class=\"formLabelRequired\"><fmt:message key=\"reports.includeTabular\"/></td>\r\n                <td class=\"formField\"><input type=\"checkbox\" id=\"includeData\"/></td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td class=\"formLabelRequired\"><fmt:message key=\"reports.zipData\"/></td>\r\n                <td class=\"formField\"><input type=\"checkbox\" id=\"zipData\"/></td>\r\n              </tr>\r\n            </tbody>\r\n\r\n            <tbody id=\"emailRecipBody\"></tbody>\r\n          </table>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  </table>\r\n</tag:page>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/war/WEB-INF/jsp/reports.jsp b/war/WEB-INF/jsp/reports.jsp
--- a/war/WEB-INF/jsp/reports.jsp	(revision 0a51b6d576a16fa5186e3b3e0dda6558e2c045ec)
+++ b/war/WEB-INF/jsp/reports.jsp	(date 1713922532142)
@@ -254,7 +254,7 @@
     function updatexaxisTitle(pointId, xaxisTitle) {
       var item = getElement(reportPointsArray, pointId, "pointId");
       if (item)
-        item["xaxisTitle"] = xaxisTitle;
+        item["xaxistitle"] = xaxisTitle;
     }
 
     function updateyaxisTitle(pointId, yaxisTitle) {
Index: src/com/serotonin/mango/db/dao/ReportDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n    Mango - Open Source M2M - http://mango.serotoninsoftware.com\r\n    Copyright (C) 2006-2011 Serotonin Software Technologies Inc.\r\n    @author Matthew Lohbihler\r\n    \r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage com.serotonin.mango.db.dao;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Types;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\nimport org.springframework.jdbc.core.RowCallbackHandler;\r\n\r\nimport com.serotonin.ShouldNeverHappenException;\r\nimport com.serotonin.db.spring.GenericRowMapper;\r\nimport com.serotonin.mango.Common;\r\nimport com.serotonin.mango.DataTypes;\r\nimport com.serotonin.mango.db.DatabaseAccess;\r\nimport com.serotonin.mango.rt.dataImage.PointValueTime;\r\nimport com.serotonin.mango.rt.dataImage.types.AlphanumericValue;\r\nimport com.serotonin.mango.rt.dataImage.types.BinaryValue;\r\nimport com.serotonin.mango.rt.dataImage.types.ImageValue;\r\nimport com.serotonin.mango.rt.dataImage.types.MangoValue;\r\nimport com.serotonin.mango.rt.dataImage.types.MultistateValue;\r\nimport com.serotonin.mango.rt.dataImage.types.NumericValue;\r\nimport com.serotonin.mango.rt.event.EventInstance;\r\nimport com.serotonin.mango.rt.event.type.EventType;\r\nimport com.serotonin.mango.view.text.TextRenderer;\r\nimport com.serotonin.mango.vo.DataPointVO;\r\nimport com.serotonin.mango.vo.UserComment;\r\nimport com.serotonin.mango.vo.report.ReportDataStreamHandler;\r\nimport com.serotonin.mango.vo.report.ReportDataValue;\r\nimport com.serotonin.mango.vo.report.ReportInstance;\r\nimport com.serotonin.mango.vo.report.ReportPointInfo;\r\nimport com.serotonin.mango.vo.report.ReportUserComment;\r\nimport com.serotonin.mango.vo.report.ReportVO;\r\nimport com.serotonin.mango.vo.report.ReportCsvStreamer;\r\nimport com.serotonin.util.SerializationHelper;\r\nimport com.serotonin.util.StringUtils;\r\nimport com.serotonin.web.i18n.I18NUtils;\r\nimport com.serotonin.web.taglib.Functions;\r\n\r\n/**\r\n * @author Matthew Lohbihler\r\n */\r\npublic class ReportDao extends BaseDao {\r\n    //\r\n    //\r\n    // Report Templates\r\n    //\r\n    private static final String REPORT_SELECT = \"select data, id, userId, name from reports \";\r\n\r\n    public List<ReportVO> getReports() {\r\n        return query(REPORT_SELECT, new ReportRowMapper());\r\n    }\r\n\r\n    public List<ReportVO> getReports(int userId) {\r\n        return query(REPORT_SELECT + \"where userId=? order by name\", new Object[] { userId }, new ReportRowMapper());\r\n    }\r\n\r\n    public ReportVO getReport(int id) {\r\n        return queryForObject(REPORT_SELECT + \"where id=?\", new Object[] { id }, new ReportRowMapper(), null);\r\n    }\r\n\r\n    class ReportRowMapper implements GenericRowMapper<ReportVO> {\r\n        public ReportVO mapRow(ResultSet rs, int rowNum) throws SQLException {\r\n            int i = 0;\r\n            ReportVO report = (ReportVO) SerializationHelper.readObject(rs.getBlob(++i).getBinaryStream());\r\n            report.setId(rs.getInt(++i));\r\n            report.setUserId(rs.getInt(++i));\r\n            report.setName(rs.getString(++i));\r\n            return report;\r\n        }\r\n    }\r\n\r\n    public void saveReport(ReportVO report) {\r\n        if (report.getId() == Common.NEW_ID)\r\n            insertReport(report);\r\n        else\r\n            updateReport(report);\r\n    }\r\n\r\n    private static final String REPORT_INSERT = \"insert into reports (userId, name, data) values (?,?,?)\";\r\n\r\n    private void insertReport(final ReportVO report) {\r\n        report.setId(doInsert(REPORT_INSERT,\r\n                new Object[] { report.getUserId(), report.getName(), SerializationHelper.writeObject(report) },\r\n                new int[] { Types.INTEGER, Types.VARCHAR, Types.BLOB }));\r\n    }\r\n\r\n    private static final String REPORT_UPDATE = \"update reports set userId=?, name=?, data=? where id=?\";\r\n\r\n    private void updateReport(final ReportVO report) {\r\n        ejt.update(\r\n                REPORT_UPDATE,\r\n                new Object[] { report.getUserId(), report.getName(), SerializationHelper.writeObject(report),\r\n                        report.getId() }, new int[] { Types.INTEGER, Types.VARCHAR, Types.BLOB, Types.INTEGER });\r\n    }\r\n\r\n    public void deleteReport(int reportId) {\r\n        ejt.update(\"delete from reports where id=?\", new Object[] { reportId });\r\n    }\r\n\r\n    //\r\n    //\r\n    // Report Instances\r\n    //\r\n    private static final String REPORT_INSTANCE_SELECT = \"select id, userId, name, includeEvents, includeUserComments, reportStartTime, reportEndTime, runStartTime, \"\r\n            + \"  runEndTime, recordCount, preventPurge \" + \"from reportInstances \";\r\n\r\n    public List<ReportInstance> getReportInstances(int userId) {\r\n        return query(REPORT_INSTANCE_SELECT + \"where userId=? order by runStartTime desc\", new Object[] { userId },\r\n                new ReportInstanceRowMapper());\r\n    }\r\n\r\n    public ReportInstance getReportInstance(int id) {\r\n        return queryForObject(REPORT_INSTANCE_SELECT + \"where id=?\", new Object[] { id },\r\n                new ReportInstanceRowMapper(), null);\r\n    }\r\n\r\n    class ReportInstanceRowMapper implements GenericRowMapper<ReportInstance> {\r\n        public ReportInstance mapRow(ResultSet rs, int rowNum) throws SQLException {\r\n            int i = 0;\r\n            ReportInstance ri = new ReportInstance();\r\n            ri.setId(rs.getInt(++i));\r\n            ri.setUserId(rs.getInt(++i));\r\n            ri.setName(rs.getString(++i));\r\n            ri.setIncludeEvents(rs.getInt(++i));\r\n            ri.setIncludeUserComments(charToBool(rs.getString(++i)));\r\n            ri.setReportStartTime(rs.getLong(++i));\r\n            ri.setReportEndTime(rs.getLong(++i));\r\n            ri.setRunStartTime(rs.getLong(++i));\r\n            ri.setRunEndTime(rs.getLong(++i));\r\n            ri.setRecordCount(rs.getInt(++i));\r\n            ri.setPreventPurge(charToBool(rs.getString(++i)));\r\n            return ri;\r\n        }\r\n    }\r\n\r\n    public void deleteReportInstance(int id, int userId) {\r\n        ejt.update(\"delete from reportInstances where id=? and userId=?\", new Object[] { id, userId });\r\n    }\r\n\r\n    public int purgeReportsBefore(final long time) {\r\n        return ejt.update(\"delete from reportInstances where runStartTime<? and preventPurge=?\", new Object[] { time,\r\n                boolToChar(false) });\r\n    }\r\n\r\n    public void setReportInstancePreventPurge(int id, boolean preventPurge, int userId) {\r\n        ejt.update(\"update reportInstances set preventPurge=? where id=? and userId=?\", new Object[] {\r\n                boolToChar(preventPurge), id, userId });\r\n    }\r\n\r\n    /**\r\n     * This method should only be called by the ReportWorkItem.\r\n     */\r\n    private static final String REPORT_INSTANCE_INSERT = \"insert into reportInstances \"\r\n            + \"  (userId, name, includeEvents, includeUserComments, reportStartTime, reportEndTime, runStartTime, \"\r\n            + \"     runEndTime, recordCount, preventPurge) \" + \"  values (?,?,?,?,?,?,?,?,?,?)\";\r\n    private static final String REPORT_INSTANCE_UPDATE = \"update reportInstances set reportStartTime=?, reportEndTime=?, runStartTime=?, runEndTime=?, recordCount=? \"\r\n            + \"where id=?\";\r\n\r\n    public void saveReportInstance(ReportInstance instance) {\r\n        if (instance.getId() == Common.NEW_ID)\r\n            instance.setId(doInsert(\r\n                    REPORT_INSTANCE_INSERT,\r\n                    new Object[] { instance.getUserId(), instance.getName(), instance.getIncludeEvents(),\r\n                            boolToChar(instance.isIncludeUserComments()), instance.getReportStartTime(),\r\n                            instance.getReportEndTime(), instance.getRunStartTime(), instance.getRunEndTime(),\r\n                            instance.getRecordCount(), boolToChar(instance.isPreventPurge()) }));\r\n        else\r\n            ejt.update(\r\n                    REPORT_INSTANCE_UPDATE,\r\n                    new Object[] { instance.getReportStartTime(), instance.getReportEndTime(),\r\n                            instance.getRunStartTime(), instance.getRunEndTime(), instance.getRecordCount(),\r\n                            instance.getId() });\r\n    }\r\n\r\n    /**\r\n     * This method should only be called by the ReportWorkItem.\r\n     */\r\n    private static final String REPORT_INSTANCE_POINTS_INSERT = \"insert into reportInstancePoints \" //\r\n            + \"(reportInstanceId, dataSourceName, pointName, dataType, startValue, textRenderer, colour, consolidatedChart, scatterchart, plottitle, xaxisTitle, yaxisTitle, referenceline) \"\r\n            + \"values (?,?,?,?,?,?,?,?,?,?,?,?,?)\";\r\n\r\n    public static class PointInfo {\r\n        private final DataPointVO point;\r\n        private final String colour;\r\n        private final boolean consolidatedChart;\r\n        private final boolean scatterChart;\r\n        private final String plotTitle;\r\n        private final String xaxisTitle;\r\n        private final String yaxisTitle;\r\n        private final int referenceLine;\r\n\r\n        public PointInfo(DataPointVO point, String colour, boolean consolidatedChart, boolean scatterChart, String plotTitle, String xaxisTitle, String yaxisTitle, int referenceLine) {\r\n            this.point = point;\r\n            this.colour = colour;\r\n            this.consolidatedChart = consolidatedChart;\r\n            this.plotTitle = plotTitle;\r\n            this.scatterChart = scatterChart;\r\n            this.xaxisTitle = xaxisTitle;\r\n            this.yaxisTitle = yaxisTitle;\r\n            this.referenceLine = referenceLine;\r\n        }\r\n\r\n        public DataPointVO getPoint() {\r\n            return point;\r\n        }\r\n\r\n        public String getColour() {\r\n            return colour;\r\n        }\r\n\r\n        public boolean isConsolidatedChart() {\r\n            return consolidatedChart;\r\n        }\r\n        public boolean isScatterChart() { return scatterChart;}\r\n        public String getPlotTitle() { return plotTitle;}\r\n        public String getxaxisTitle() { return xaxisTitle;}\r\n        public String getYaxisTitle() { return yaxisTitle;}\r\n        public int getReferenceLine() { return referenceLine;}\r\n    }\r\n\r\n    public int runReport(final ReportInstance instance, List<PointInfo> points, ResourceBundle bundle) {\r\n        PointValueDao pointValueDao = new PointValueDao();\r\n        int count = 0;\r\n        String userLabel = I18NUtils.getMessage(bundle, \"common.user\");\r\n        String setPointLabel = I18NUtils.getMessage(bundle, \"annotation.eventHandler\");\r\n        String anonymousLabel = I18NUtils.getMessage(bundle, \"annotation.anonymous\");\r\n        String deletedLabel = I18NUtils.getMessage(bundle, \"common.deleted\");\r\n\r\n        // The timestamp selection code is used multiple times for different tables\r\n        String timestampSql;\r\n        Object[] timestampParams;\r\n        if (instance.isFromInception() && instance.isToNow()) {\r\n            timestampSql = \"\";\r\n            timestampParams = new Object[0];\r\n        }\r\n        else if (instance.isFromInception()) {\r\n            timestampSql = \"and ${field}<?\";\r\n            timestampParams = new Object[] { instance.getReportEndTime() };\r\n        }\r\n        else if (instance.isToNow()) {\r\n            timestampSql = \"and ${field}>=?\";\r\n            timestampParams = new Object[] { instance.getReportStartTime() };\r\n        }\r\n        else {\r\n            timestampSql = \"and ${field}>=? and ${field}<?\";\r\n            timestampParams = new Object[] { instance.getReportStartTime(), instance.getReportEndTime() };\r\n        }\r\n\r\n        // For each point.\r\n        for (PointInfo pointInfo : points) {\r\n            DataPointVO point = pointInfo.getPoint();\r\n            int dataType = point.getPointLocator().getDataTypeId();\r\n\r\n            MangoValue startValue = null;\r\n            if (!instance.isFromInception()) {\r\n                // Get the value just before the start of the report\r\n                PointValueTime pvt = pointValueDao.getPointValueBefore(point.getId(), instance.getReportStartTime());\r\n                if (pvt != null)\r\n                    startValue = pvt.getValue();\r\n\r\n                // Make sure the data types match\r\n                if (DataTypes.getDataType(startValue) != dataType)\r\n                    startValue = null;\r\n            }\r\n\r\n            // Insert the reportInstancePoints record\r\n            String name = Functions.truncate(point.getName(), 100);\r\n\r\n            int reportPointId = doInsert(\r\n                    REPORT_INSTANCE_POINTS_INSERT,\r\n                    new Object[] { instance.getId(), point.getDeviceName(), name, dataType,\r\n                            DataTypes.valueToString(startValue),\r\n                            SerializationHelper.writeObject(point.getTextRenderer()), pointInfo.getColour(),\r\n                            boolToChar(pointInfo.isConsolidatedChart()) }, new int[] { Types.INTEGER, Types.VARCHAR,\r\n                            Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.BLOB, Types.VARCHAR, Types.CHAR });\r\n\r\n            // Insert the reportInstanceData records\r\n            String insertSQL = \"insert into reportInstanceData \" + \"  select id, \" + reportPointId\r\n                    + \", pointValue, ts from pointValues \" + \"    where dataPointId=? and dataType=? \"\r\n                    + StringUtils.replaceMacro(timestampSql, \"field\", \"ts\");\r\n            count += ejt.update(insertSQL, appendParameters(timestampParams, point.getId(), dataType));\r\n\r\n            String annoCase;\r\n            if (Common.ctx.getDatabaseAccess().getType() == DatabaseAccess.DatabaseType.DERBY)\r\n                annoCase = \"    case when pva.sourceType=1 then '\" + userLabel //\r\n                        + \": ' || (case when u.username is null then '\" + deletedLabel + \"' else u.username end) \" //\r\n                        + \"         when pva.sourceType=2 then '\" + setPointLabel + \"' \" //\r\n                        + \"         when pva.sourceType=3 then '\" + anonymousLabel + \"' \" //\r\n                        + \"         else 'Unknown source type: ' || cast(pva.sourceType as char(3)) \" //\r\n                        + \"    end \";\r\n            else if (Common.ctx.getDatabaseAccess().getType() == DatabaseAccess.DatabaseType.MSSQL)\r\n                annoCase = \"    case pva.sourceType\" //\r\n                        + \"        when 1 then '\" + userLabel + \": ' + isnull(u.username, '\" + deletedLabel + \"') \" //\r\n                        + \"        when 2 then '\" + setPointLabel + \"'\" //\r\n                        + \"        when 3 then '\" + anonymousLabel + \"'\" //\r\n                        + \"        else 'Unknown source type: ' + cast(pva.sourceType as nvarchar)\" //\r\n                        + \"    end \";\r\n            else if (Common.ctx.getDatabaseAccess().getType() == DatabaseAccess.DatabaseType.MYSQL)\r\n                annoCase = \"    case pva.sourceType\" //\r\n                        + \"      when 1 then concat('\" + userLabel + \": ',ifnull(u.username,'\" + deletedLabel + \"')) \" //\r\n                        + \"      when 2 then '\" + setPointLabel + \"'\" //\r\n                        + \"      when 3 then '\" + anonymousLabel + \"'\" //\r\n                        + \"      else concat('Unknown source type: ', pva.sourceType)\" //\r\n                        + \"    end \";\r\n            else\r\n                throw new ShouldNeverHappenException(\"unhandled database type: \"\r\n                        + Common.ctx.getDatabaseAccess().getType());\r\n\r\n            // Insert the reportInstanceDataAnnotations records\r\n            ejt.update(\"insert into reportInstanceDataAnnotations \" //\r\n                    + \"  (pointValueId, reportInstancePointId, textPointValueShort, textPointValueLong, sourceValue) \" //\r\n                    + \"  select rd.pointValueId, rd.reportInstancePointId, pva.textPointValueShort, \" //\r\n                    + \"    pva.textPointValueLong, \" + annoCase + \"  from reportInstanceData rd \" //\r\n                    + \"    join reportInstancePoints rp on rd.reportInstancePointId = rp.id \" //\r\n                    + \"    join pointValueAnnotations pva on rd.pointValueId = pva.pointValueId \" //\r\n                    + \"    left join users u on pva.sourceType=1 and pva.sourceId = u.id \" //\r\n                    + \"  where rp.id = ?\", new Object[] { reportPointId });\r\n\r\n            // Insert the reportInstanceEvents records for the point.\r\n            if (instance.getIncludeEvents() != ReportVO.EVENTS_NONE) {\r\n                String eventSQL = \"insert into reportInstanceEvents \" //\r\n                        + \"  (eventId, reportInstanceId, typeId, typeRef1, typeRef2, activeTs, rtnApplicable, rtnTs,\" //\r\n                        + \"   rtnCause, alarmLevel, message, ackTs, ackUsername, alternateAckSource)\" //\r\n                        + \"  select e.id, \" + instance.getId() + \", e.typeId, e.typeRef1, e.typeRef2, e.activeTs, \" //\r\n                        + \"    e.rtnApplicable, e.rtnTs, e.rtnCause, e.alarmLevel, e.message, e.ackTs, u.username, \" //\r\n                        + \"    e.alternateAckSource \" //\r\n                        + \"  from events e join userEvents ue on ue.eventId=e.id \" //\r\n                        + \"    left join users u on e.ackUserId=u.id \" //\r\n                        + \"  where ue.userId=? \" //\r\n                        + \"    and e.typeId=\" //\r\n                        + EventType.EventSources.DATA_POINT //\r\n                        + \"    and e.typeRef1=? \";\r\n\r\n                if (instance.getIncludeEvents() == ReportVO.EVENTS_ALARMS)\r\n                    eventSQL += \"and e.alarmLevel > 0 \";\r\n\r\n                eventSQL += StringUtils.replaceMacro(timestampSql, \"field\", \"e.activeTs\");\r\n                ejt.update(eventSQL, appendParameters(timestampParams, instance.getUserId(), point.getId()));\r\n            }\r\n\r\n            // Insert the reportInstanceUserComments records for the point.\r\n            if (instance.isIncludeUserComments()) {\r\n                String commentSQL = \"insert into reportInstanceUserComments \" //\r\n                        + \"  (reportInstanceId, username, commentType, typeKey, ts, commentText)\" //\r\n                        + \"  select \" + instance.getId() + \", u.username, \" + UserComment.TYPE_POINT + \", \" //\r\n                        + reportPointId + \", uc.ts, uc.commentText \" //\r\n                        + \"  from userComments uc \" //\r\n                        + \"    left join users u on uc.userId=u.id \" //\r\n                        + \"  where uc.commentType=\" + UserComment.TYPE_POINT //\r\n                        + \"    and uc.typeKey=? \";\r\n\r\n                // Only include comments made in the duration of the report.\r\n                commentSQL += StringUtils.replaceMacro(timestampSql, \"field\", \"uc.ts\");\r\n                ejt.update(commentSQL, appendParameters(timestampParams, point.getId()));\r\n            }\r\n        }\r\n\r\n        // Insert the reportInstanceUserComments records for the selected events\r\n        if (instance.isIncludeUserComments()) {\r\n            String commentSQL = \"insert into reportInstanceUserComments \" //\r\n                    + \"  (reportInstanceId, username, commentType, typeKey, ts, commentText)\" //\r\n                    + \"  select \" + instance.getId() + \", u.username, \" + UserComment.TYPE_EVENT + \", uc.typeKey, \" //\r\n                    + \"    uc.ts, uc.commentText \" //\r\n                    + \"  from userComments uc \" //\r\n                    + \"    left join users u on uc.userId=u.id \" //\r\n                    + \"    join reportInstanceEvents re on re.eventId=uc.typeKey \" //\r\n                    + \"  where uc.commentType=\" + UserComment.TYPE_EVENT //\r\n                    + \"    and re.reportInstanceId=? \";\r\n            ejt.update(commentSQL, new Object[] { instance.getId() });\r\n        }\r\n\r\n        // If the report had undefined start or end times, update them with values from the data.\r\n        if (instance.isFromInception() || instance.isToNow()) {\r\n            ejt.query(\r\n                    \"select min(rd.ts), max(rd.ts) \" //\r\n                            + \"from reportInstancePoints rp \"\r\n                            + \"  join reportInstanceData rd on rp.id=rd.reportInstancePointId \"\r\n                            + \"where rp.reportInstanceId=?\", new Object[] { instance.getId() },\r\n                    new RowCallbackHandler() {\r\n                        public void processRow(ResultSet rs) throws SQLException {\r\n                            if (instance.isFromInception())\r\n                                instance.setReportStartTime(rs.getLong(1));\r\n                            if (instance.isToNow())\r\n                                instance.setReportEndTime(rs.getLong(2));\r\n                        }\r\n                    });\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    private Object[] appendParameters(Object[] toAppend, Object... params) {\r\n        if (toAppend.length == 0)\r\n            return params;\r\n        if (params.length == 0)\r\n            return toAppend;\r\n\r\n        Object[] result = new Object[params.length + toAppend.length];\r\n        System.arraycopy(params, 0, result, 0, params.length);\r\n        System.arraycopy(toAppend, 0, result, params.length, toAppend.length);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * This method guarantees that the data is provided to the setData handler method grouped by point (points are not\r\n     * ordered), and sorted by time ascending.\r\n     */\r\n    private static final String REPORT_INSTANCE_POINT_SELECT = \"select id, dataSourceName, pointName, dataType, \" // \r\n            + \"startValue, textRenderer, colour, consolidatedChart, scatterchart, plottitle, xaxisTitle, yaxisTitle, referenceline from reportInstancePoints \";\r\n    private static final String REPORT_INSTANCE_DATA_SELECT = \"select rd.pointValue, rda.textPointValueShort, \" //\r\n            + \"  rda.textPointValueLong, rd.ts, rda.sourceValue \"\r\n            + \"from reportInstanceData rd \"\r\n            + \"  left join reportInstanceDataAnnotations rda on \"\r\n            + \"      rd.pointValueId=rda.pointValueId and rd.reportInstancePointId=rda.reportInstancePointId \";\r\n\r\n    public void reportInstanceData(int instanceId, final ReportDataStreamHandler handler) {\r\n        // Retrieve point information.\r\n        List<ReportPointInfo> pointInfos = query(REPORT_INSTANCE_POINT_SELECT + \"where reportInstanceId=?\",\r\n                new Object[] { instanceId }, new GenericRowMapper<ReportPointInfo>() {\r\n                    public ReportPointInfo mapRow(ResultSet rs, int rowNum) throws SQLException {\r\n                        ReportPointInfo rp = new ReportPointInfo();\r\n                        rp.setReportPointId(rs.getInt(1));\r\n                        rp.setDeviceName(rs.getString(2));\r\n                        rp.setPointName(rs.getString(3));\r\n                        rp.setDataType(rs.getInt(4));\r\n                        String startValue = rs.getString(5);\r\n                        if (startValue != null)\r\n                            rp.setStartValue(MangoValue.stringToValue(startValue, rp.getDataType()));\r\n                        rp.setTextRenderer((TextRenderer) SerializationHelper.readObject(rs.getBlob(6)\r\n                                .getBinaryStream()));\r\n                        rp.setColour(rs.getString(7));\r\n                        rp.setConsolidatedChart(charToBool(rs.getString(8)));\r\n                        return rp;\r\n                    }\r\n                });\r\n\r\n        final ReportDataValue rdv = new ReportDataValue();\r\n        for (final ReportPointInfo point : pointInfos) {\r\n            handler.startPoint(point);\r\n\r\n            rdv.setReportPointId(point.getReportPointId());\r\n            final int dataType = point.getDataType();\r\n            ejt.query(REPORT_INSTANCE_DATA_SELECT + \"where rd.reportInstancePointId=? order by rd.ts\",\r\n                    new Object[] { point.getReportPointId() }, new RowCallbackHandler() {\r\n                        public void processRow(ResultSet rs) throws SQLException {\r\n                            switch (dataType) {\r\n                                case (DataTypes.NUMERIC):\r\n                                    rdv.setValue(new NumericValue(rs.getDouble(1)));\r\n                                    break;\r\n                                case (DataTypes.BINARY):\r\n                                    rdv.setValue(new BinaryValue(rs.getDouble(1) == 1));\r\n                                    break;\r\n                                case (DataTypes.MULTISTATE):\r\n                                    rdv.setValue(new MultistateValue(rs.getInt(1)));\r\n                                    break;\r\n                                case (DataTypes.ALPHANUMERIC):\r\n                                    rdv.setValue(new AlphanumericValue(rs.getString(2)));\r\n                                    if (rs.wasNull())\r\n                                        rdv.setValue(new AlphanumericValue(rs.getString(3)));\r\n                                    break;\r\n                                case (DataTypes.IMAGE):\r\n                                    rdv.setValue(new ImageValue(Integer.parseInt(rs.getString(2)), rs.getInt(1)));\r\n                                    break;\r\n                                default:\r\n                                    rdv.setValue(null);\r\n                            }\r\n\r\n                            rdv.setTime(rs.getLong(4));\r\n                            rdv.setAnnotation(rs.getString(5));\r\n\r\n                            handler.pointData(rdv);\r\n                        }\r\n                    });\r\n        }\r\n        handler.done();\r\n    }\r\n    public void reportInstanceDataHorizontal(int instanceId, ResourceBundle bundle, ReportCsvStreamer csvStreamer) {\r\n        // Retrieve point information.\r\n        List<ReportPointInfo> pointInfos = query(REPORT_INSTANCE_POINT_SELECT + \"where reportInstanceId=?\",\r\n                new Object[] { instanceId }, new GenericRowMapper<ReportPointInfo>() {\r\n                    public ReportPointInfo mapRow(ResultSet rs, int rowNum) throws SQLException {\r\n                        ReportPointInfo rp = new ReportPointInfo();\r\n                        rp.setReportPointId(rs.getInt(1));\r\n                        rp.setDeviceName(rs.getString(2));\r\n                        rp.setPointName(rs.getString(3));\r\n                        rp.setDataType(rs.getInt(4));\r\n                        String startValue = rs.getString(5);\r\n                        if (startValue != null)\r\n                            rp.setStartValue(MangoValue.stringToValue(startValue, rp.getDataType()));\r\n                        rp.setTextRenderer((TextRenderer) SerializationHelper.readObject(rs.getBlob(6)\r\n                                .getBinaryStream()));\r\n                        rp.setColour(rs.getString(7));\r\n                        rp.setConsolidatedChart(charToBool(rs.getString(8)));\r\n                        return rp;\r\n                    }\r\n                });\r\n\r\n        csvStreamer.addHeader(bundle,pointInfos.size()); //writing headers for each point\r\n        List<List<ReportDataValue>> rdv_list_list = new ArrayList<>();// creating a list of lists to store all the report data values\r\n\r\n        int max = 0;\r\n\r\n        for (final ReportPointInfo point : pointInfos) { // For every group\r\n            List<ReportDataValue> rdv_list = new ArrayList<>();\r\n\r\n            final int pointId = point.getReportPointId();\r\n            final int dataType = point.getDataType();\r\n            ejt.query(REPORT_INSTANCE_DATA_SELECT + \"where rd.reportInstancePointId=? order by rd.ts\",\r\n                    new Object[] { point.getReportPointId() }, new RowCallbackHandler() {\r\n                        public void processRow(ResultSet rs) throws SQLException {\r\n\r\n                            ReportDataValue rdv = new ReportDataValue();\r\n                            rdv.setReportPointId(pointId);\r\n                            switch (dataType) {\r\n                                case (DataTypes.NUMERIC):\r\n                                    rdv.setValue(new NumericValue(rs.getDouble(1)));\r\n                                    break;\r\n                                case (DataTypes.BINARY):\r\n                                    rdv.setValue(new BinaryValue(rs.getDouble(1) == 1));\r\n                                    break;\r\n                                case (DataTypes.MULTISTATE):\r\n                                    rdv.setValue(new MultistateValue(rs.getInt(1)));\r\n                                    break;\r\n                                case (DataTypes.ALPHANUMERIC):\r\n                                    rdv.setValue(new AlphanumericValue(rs.getString(2)));\r\n                                    if (rs.wasNull())\r\n                                        rdv.setValue(new AlphanumericValue(rs.getString(3)));\r\n                                    break;\r\n                                case (DataTypes.IMAGE):\r\n                                    rdv.setValue(new ImageValue(Integer.parseInt(rs.getString(2)), rs.getInt(1)));\r\n                                    break;\r\n                                default:\r\n                                    rdv.setValue(null);\r\n                            }\r\n\r\n                            rdv.setTime(rs.getLong(4));\r\n                            rdv.setAnnotation(rs.getString(5));\r\n\r\n                            rdv_list.add(rdv);//add rdv to list rdv_list\r\n                        }\r\n                    }\r\n            );\r\n\r\n            rdv_list_list.add(rdv_list); //add rdv_list to the list of lists\r\n            max = Math.max(max, rdv_list.size()); // calculating max to ensure that all the null values are also written\r\n        }\r\n\r\n        List<ReportDataValue> rdvh;\r\n        for(int i=0; i<max; i++) {\r\n            rdvh = new ArrayList<>();\r\n            for(List<ReportDataValue> hor: rdv_list_list){\r\n                if(hor.size()>i) {\r\n                    rdvh.add(hor.get(i));\r\n                }\r\n                else{\r\n                    rdvh.add(null);\r\n                }\r\n            }\r\n            csvStreamer.pointDataHorizontal(rdvh, pointInfos); // traversing through the list of lists such that each time a row of all the points are written at a time\r\n        }\r\n\r\n        csvStreamer.done();\r\n    }\r\n\r\n    private static final String EVENT_SELECT = //\r\n            \"select eventId, typeId, typeRef1, typeRef2, activeTs, rtnApplicable, rtnTs, rtnCause, alarmLevel, message, \" //\r\n                    + \"ackTs, 0, ackUsername, alternateAckSource \" //\r\n                    + \"from reportInstanceEvents \" //\r\n                    + \"where reportInstanceId=? \" //\r\n                    + \"order by activeTs\";\r\n    private static final String EVENT_COMMENT_SELECT = \"select username, typeKey, ts, commentText \" //\r\n            + \"from reportInstanceUserComments \" //\r\n            + \"where reportInstanceId=? and commentType=? \" //\r\n            + \"order by ts\";\r\n\r\n    public List<EventInstance> getReportInstanceEvents(int instanceId) {\r\n        // Get the events.\r\n        final List<EventInstance> events = query(EVENT_SELECT, new Object[] { instanceId },\r\n                new EventDao.EventInstanceRowMapper());\r\n        // Add in the comments.\r\n        ejt.query(EVENT_COMMENT_SELECT, new Object[] { instanceId, UserComment.TYPE_EVENT }, new RowCallbackHandler() {\r\n            public void processRow(ResultSet rs) throws SQLException {\r\n                // Create the comment\r\n                UserComment c = new UserComment();\r\n                c.setUsername(rs.getString(1));\r\n                c.setTs(rs.getLong(3));\r\n                c.setComment(rs.getString(4));\r\n\r\n                // Find the event and add the comment\r\n                int eventId = rs.getInt(2);\r\n                for (EventInstance event : events) {\r\n                    if (event.getId() == eventId) {\r\n                        if (event.getEventComments() == null)\r\n                            event.setEventComments(new ArrayList<UserComment>());\r\n                        event.addEventComment(c);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        // Done\r\n        return events;\r\n    }\r\n\r\n    private static final String USER_COMMENT_SELECT = \"select rc.username, rc.commentType, rc.typeKey, rp.pointName, \" //\r\n            + \"  rc.ts, rc.commentText \"\r\n            + \"from reportInstanceUserComments rc \"\r\n            + \"  left join reportInstancePoints rp on rc.typeKey=rp.id and rc.commentType=\"\r\n            + UserComment.TYPE_POINT\r\n            + \" \" + \"where rc.reportInstanceId=? \" + \"order by rc.ts \";\r\n\r\n    public List<ReportUserComment> getReportInstanceUserComments(int instanceId) {\r\n        return query(USER_COMMENT_SELECT, new Object[] { instanceId }, new ReportCommentRowMapper());\r\n    }\r\n\r\n    class ReportCommentRowMapper implements GenericRowMapper<ReportUserComment> {\r\n        @Override\r\n        public ReportUserComment mapRow(ResultSet rs, int rowNum) throws SQLException {\r\n            ReportUserComment c = new ReportUserComment();\r\n            c.setUsername(rs.getString(1));\r\n            c.setCommentType(rs.getInt(2));\r\n            c.setTypeKey(rs.getInt(3));\r\n            c.setPointName(rs.getString(4));\r\n            c.setTs(rs.getLong(5));\r\n            c.setComment(rs.getString(6));\r\n            return c;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/serotonin/mango/db/dao/ReportDao.java b/src/com/serotonin/mango/db/dao/ReportDao.java
--- a/src/com/serotonin/mango/db/dao/ReportDao.java	(revision 0a51b6d576a16fa5186e3b3e0dda6558e2c045ec)
+++ b/src/com/serotonin/mango/db/dao/ReportDao.java	(date 1713922495578)
@@ -196,7 +196,7 @@
      * This method should only be called by the ReportWorkItem.
      */
     private static final String REPORT_INSTANCE_POINTS_INSERT = "insert into reportInstancePoints " //
-            + "(reportInstanceId, dataSourceName, pointName, dataType, startValue, textRenderer, colour, consolidatedChart, scatterchart, plottitle, xaxisTitle, yaxisTitle, referenceline) "
+            + "(reportInstanceId, dataSourceName, pointName, dataType, startValue, textRenderer, colour, consolidatedChart, scatterchart, plottitle, xaxistitle, yaxistitle, referenceline) "
             + "values (?,?,?,?,?,?,?,?,?,?,?,?,?)";
 
     public static class PointInfo {
Index: src/com/serotonin/mango/vo/report/ReportPointVO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.serotonin.mango.vo.report;\r\n\r\nimport java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.io.Serializable;\r\n\r\nimport com.serotonin.mango.vo.DataPointVO;\r\nimport com.serotonin.util.SerializationHelper;\r\n\r\npublic class ReportPointVO implements Serializable {\r\n    private int pointId;\r\n    private String colour;\r\n    private boolean consolidatedChart;\r\n    private boolean scatterChart;\r\n    private String plotTitle;\r\n    private String xaxisTitle;\r\n    private String yaxisTitle;\r\n    private int referenceLine;\r\n\r\n    public int getPointId() {\r\n        return pointId;\r\n    }\r\n\r\n    public void setPointId(int pointId) {\r\n        this.pointId = pointId;\r\n    }\r\n\r\n    public String getColour() {\r\n        return colour;\r\n    }\r\n\r\n    public void setColour(String colour) {\r\n        this.colour = colour;\r\n    }\r\n\r\n    public boolean isConsolidatedChart() {\r\n        return consolidatedChart;\r\n    }\r\n\r\n    public void setConsolidatedChart(boolean consolidatedChart) {\r\n        this.consolidatedChart = consolidatedChart;\r\n    }\r\n\r\n    public boolean isScatterChart() {\r\n        return scatterChart;\r\n    }\r\n\r\n    public void setScatterChart(boolean scatterChart) {\r\n        this.scatterChart = scatterChart;\r\n    }\r\n\r\n    public String getPlotTitle() {\r\n        return plotTitle;\r\n    }\r\n\r\n    public void setPlotTitle(String plotTitle) {\r\n        this.plotTitle = plotTitle;\r\n    }\r\n\r\n    public String getxaxisTitle() {\r\n        return xaxisTitle;\r\n    }\r\n\r\n    public void setXaxisTitle(String xaxisTitle) {\r\n        this.xaxisTitle = xaxisTitle;\r\n    }\r\n\r\n    public String getyaxisTitle() {\r\n        return yaxisTitle;\r\n    }\r\n\r\n    public void setYaxisTitle(String yaxisTitle) {\r\n        this.yaxisTitle = yaxisTitle;\r\n    }\r\n\r\n    public int getReferenceLine() {\r\n        return referenceLine;\r\n    }\r\n\r\n    public void setReferenceLine(int referenceLine) {\r\n        this.referenceLine = referenceLine;\r\n    }\r\n\r\n    //\r\n    //\r\n    // Serialization\r\n    //\r\n    private static final long serialVersionUID = -1;\r\n    private static final int version = 2;\r\n\r\n    private void writeObject(ObjectOutputStream out) throws IOException {\r\n        out.writeInt(version);\r\n\r\n        out.writeInt(pointId);\r\n        SerializationHelper.writeSafeUTF(out, colour);\r\n        out.writeBoolean(consolidatedChart);\r\n    }\r\n\r\n    private void readObject(ObjectInputStream in) throws IOException {\r\n        int ver = in.readInt();\r\n\r\n        // Switch on the version of the class so that version changes can be elegantly handled.\r\n        if (ver == 1) {\r\n            pointId = in.readInt();\r\n            colour = SerializationHelper.readSafeUTF(in);\r\n            consolidatedChart = true;\r\n        }\r\n        else if (ver == 2) {\r\n            pointId = in.readInt();\r\n            colour = SerializationHelper.readSafeUTF(in);\r\n            consolidatedChart = in.readBoolean();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/serotonin/mango/vo/report/ReportPointVO.java b/src/com/serotonin/mango/vo/report/ReportPointVO.java
--- a/src/com/serotonin/mango/vo/report/ReportPointVO.java	(revision 0a51b6d576a16fa5186e3b3e0dda6558e2c045ec)
+++ b/src/com/serotonin/mango/vo/report/ReportPointVO.java	(date 1713922726947)
@@ -62,7 +62,7 @@
         return xaxisTitle;
     }
 
-    public void setXaxisTitle(String xaxisTitle) {
+    public void setxaxisTitle(String xaxisTitle) {
         this.xaxisTitle = xaxisTitle;
     }
 
@@ -70,7 +70,7 @@
         return yaxisTitle;
     }
 
-    public void setYaxisTitle(String yaxisTitle) {
+    public void setyaxisTitle(String yaxisTitle) {
         this.yaxisTitle = yaxisTitle;
     }
 
